plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 28
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        testOptions {
            unitTests.all {
                useJUnitPlatform()
            }
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

repositories {
    maven {
        name = "github.speechly.api"
        url = uri("https://maven.pkg.github.com/speechly/api")

        credentials {
            def (githubUser, githubToken) = getGithubCredentials()

            username = githubUser
            password = githubToken
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "com.speechly:api:0.0.5"
    implementation "io.grpc:grpc-okhttp:1.34.0"
    implementation "com.beust:klaxon:5.0.1"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.0"
    testImplementation "io.strikt:strikt-core:0.28.1"

    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"
}

private def getGithubCredentials() {
    def localPropertiesFile = project.rootProject.file('local.properties')
    if (!localPropertiesFile.exists()) {
        return [
                System.getenv("GITHUB_USERNAME"),
                System.getenv("GITHUB_TOKEN")
        ]
    }

    Properties properties = new Properties()
    properties.load(localPropertiesFile.newDataInputStream())

    return [
            properties.getProperty("gpr.user"),
            properties.getProperty("gpr.token")
    ]
}